#include "levenshtein_distance.hpp"
#include "Arduino.h"

int min(int a, int b){
    if (a > b){
        return b;
    }
    else{
        return a;
    }
}

int levenshtein_distance(String a, String b, int index)
{
    int n =  a.length();
    int m = b.length();
    //どっちかが空なら片方の文字の長さ
    if (n == 0){
        return m;
    }
    if (m == 0){
        return n;
    }
    // int dp[22][22] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
    // for (int i=0;i<n+1;i++){
    //     dp[i][0] = i;
    // }
    // for (int j=0;j<m+1;j++){
    //     dp[0][j] = j;
    // }
    // for(int i=1;i<n+1;i++){
    //     for (int j=1;j<m+1;j++){
    //         int cost;
    //         if (a.charAt(i-1) == b.charAt(j-1))
    //         {
    //             cost = 0;
    //         }
    //         else{
    //             if (i==0||)
    //             cost = 1;
    //         }
    //         dp[i][j] = min(dp[i - 1][j] + 1, min(dp[i][j - 1] + 1,dp[i - 1][j - 1] + cost));
    //     }
    // }
    //return dp[n][m];
    if (s.charAt(0) == t.charAt(0)){
        return levenshtein_distance(a.remove(0), b.remove(0), index+1);
    }
    else{
        //aの先頭に追加
        int l1 = levenshtein_distance(a, b.remove(0), index+1);
        //aの先頭を削除
        int l2 = levenshtein_distance(a.remove(0), b, index+1);
        //aの先頭を置換
        int l3 = levenshtein_distance(a.remove(0), b.remove(0), index+1);
    }
    if index == 0{
        return 5 + min(l1,min(l2, l3))
    }
    return 1 + min(l1,min(l2, l3))
}
